#include <lime/module.hpp>

#define LIME_MAP_EXPORTS(TRANSFORMER) @MAP_EXPORTS@

namespace lime::proxy
{
    namespace detail
    {
        inline std::uintptr_t originals[@EXPORT_COUNT@] = {};
    } // namespace detail

    inline bool setup(std::string_view path)
    {
        auto original = lime::module::load(path);

        if (!original)
        {
            return false;
        }

        #define LIME_LOAD_ORIGINAL(index, name) detail::originals[(index)-1] = original->symbol(name);
        LIME_MAP_EXPORTS(LIME_LOAD_ORIGINAL)
        #undef LIME_LOAD_ORIGINAL
        
        return true;
    }
} // namespace lime::proxy

#define LIME_EXPORT_FUNC(index, name)                                                                                  \
    extern "C" __attribute__((naked, stdcall)) void LIME_PROXY_EXPORT_##index()                                        \
    {                                                                                                                  \
        asm volatile("jmp *%0" : : "r"(lime::proxy::detail::originals[(index)-1]));                                    \
    }

LIME_MAP_EXPORTS(LIME_EXPORT_FUNC)

#undef LIME_EXPORT_FUNC
#undef LIME_MAP_EXPORTS
